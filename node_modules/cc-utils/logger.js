"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class StopWatch {
    constructor(logger) {
        this.logger = logger;
        this.start = Date.now();
    }
    stop(message, obj) {
        this.logger.log(message, Object.assign({ took: Date.now() - this.start }, obj));
    }
}
// https://github.com/yefremov/iserror/blob/master/index.js
function isError(err) {
    if (!err)
        return false;
    else if (err instanceof Error)
        return true;
    else if (Object.prototype.toString.call(err) === '[object Error]')
        return true;
    else
        return false;
}
function objectify(err) {
    if (isError(err)) {
        let errMessage = err.message;
        if (err.method && err.statusCode)
            errMessage = `${err.statusCode} ${err.statusMessage} ${err.method} ${err.host}${err.path} ${errMessage}`;
        return {
            errMessage,
            stack: (err.stack || '').split(/\n/).slice(0, 6).join(' '),
        };
    }
    else {
        return err;
    }
}
// https://cloud.google.com/error-reporting/docs/formatting-error-messages
const logType = 'type.googleapis.com/google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent';
class Logger {
    constructor(name, extra) {
        this.name = name;
        this.dflt = Object.assign({ name }, extra);
    }
    start() {
        return new StopWatch(this);
    }
    log(message, obj) {
        console.log(JSON.stringify(Object.assign(Object.assign(Object.assign({}, this.dflt), { message }), obj)));
    }
    info(message, obj) {
        console.error(JSON.stringify(Object.assign(Object.assign(Object.assign({}, this.dflt), { severity: 'INFO', message }), obj)));
    }
    warn(message, obj) {
        console.error(JSON.stringify(Object.assign(Object.assign(Object.assign({}, this.dflt), { severity: 'WARNING', message }), obj)));
    }
    error(message, err, obj) {
        console.error(JSON.stringify(Object.assign(Object.assign(Object.assign(Object.assign({}, this.dflt), { severity: 'ERROR', message }), objectify(err)), objectify(obj))));
    }
    errorReport(service, message, err, obj) {
        console.error(JSON.stringify(Object.assign(Object.assign(Object.assign(Object.assign({}, this.dflt), { severity: 'ERROR', message, serviceContext: { service }, '@type': logType }), objectify(err)), objectify(obj))));
    }
}
exports.default = Logger;
