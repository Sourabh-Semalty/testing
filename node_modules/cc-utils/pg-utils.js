"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const util_1 = __importDefault(require("util"));
const url_1 = __importDefault(require("url"));
const pg_1 = require("pg");
const logger_1 = __importDefault(require("./logger"));
const readFile = util_1.default.promisify(fs_1.default.readFile);
const isDev = process.env.NODE_ENV === 'development';
async function createDatabase(connStr) {
    const url = url_1.default.parse(connStr);
    const dbName = (url.pathname || '').substr(1);
    url.pathname = '/postgres'; // change database name to default 'postgres'
    const client = new pg_1.Client({ connectionString: url_1.default.format(url) });
    await client.connect();
    const SELECT_QUERY = 'SELECT 1 FROM pg_database WHERE datname = $1';
    const result = await client.query(SELECT_QUERY, [dbName]);
    if (!result.rowCount)
        await client.query(`CREATE DATABASE "${dbName}"`);
    await client.end();
}
function toCamelCase(row) {
    const mod = {};
    for (const key of Object.keys(row)) {
        const camelKey = key.replace(/_([a-z])/g, (chars) => chars[1].toUpperCase());
        mod[camelKey] = row[key];
    }
    return mod;
}
const cleanSQL = (sql) => sql.replace(/[\s\n]+/g, ' ').trim();
const logger = new logger_1.default('pg');
async function initPgConn(connStr, schemaFile) {
    await createDatabase(connStr);
    const pgPool = new pg_1.Pool({ connectionString: connStr });
    if (schemaFile) {
        const schemaSQL = await readFile(schemaFile, 'utf-8');
        await pgPool.query(schemaSQL);
    }
    const query = async (sql, params) => {
        if (isDev)
            logger.log(`SQL ${cleanSQL(sql)}`);
        return pgPool.query(sql, params);
    };
    const getRows = async (sql, params) => {
        const result = await query(sql, params);
        return result.rows.map(toCamelCase);
    };
    return {
        query,
        getRows,
    };
}
exports.initPgConn = initPgConn;
