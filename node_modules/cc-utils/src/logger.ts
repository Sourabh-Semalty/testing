class StopWatch {
  private start: number;
  constructor(private logger: Logger) {
    this.start = Date.now();
  }
  stop(message: string, obj?: any) {
    this.logger.log(message, { took: Date.now() - this.start, ...obj });
  }
}

// https://github.com/yefremov/iserror/blob/master/index.js
function isError(err: any): boolean {
  if (!err) return false;
  else if (err instanceof Error) return true;
  else if (Object.prototype.toString.call(err) === '[object Error]') return true;
  else return false;
}

function objectify(err: any): { [str: string]: any } {
  if (isError(err)) {
    let errMessage: string = err.message;
    if (err.method && err.statusCode)
      errMessage = `${err.statusCode} ${err.statusMessage} ${err.method} ${err.host}${err.path} ${errMessage}`;
    return {
      errMessage,
      stack: (err.stack || '').split(/\n/).slice(0, 6).join(' '),
    };
  } else {
    return err;
  }
}

// https://cloud.google.com/error-reporting/docs/formatting-error-messages
const logType =
  'type.googleapis.com/google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent';

interface PropsMap {
  [key: string]: string | number;
}

export default class Logger {
  private dflt: PropsMap;
  constructor(private name: string, extra?: PropsMap) {
    this.dflt = { name, ...extra };
  }
  start(): StopWatch {
    return new StopWatch(this);
  }
  log(message: string, obj?: any) {
    console.log(
      JSON.stringify({
        ...this.dflt,
        message,
        ...obj,
      })
    );
  }
  info(message: string, obj?: any) {
    console.error(
      JSON.stringify({
        ...this.dflt,
        severity: 'INFO',
        message,
        ...obj,
      })
    );
  }
  warn(message: string, obj?: any) {
    console.error(
      JSON.stringify({
        ...this.dflt,
        severity: 'WARNING',
        message,
        ...obj,
      })
    );
  }
  error(message: string): void;
  error(message: string, err: Error): void;
  error(message: string, obj: any): void;
  error(message: string, err: Error, obj: any): void;
  error(message: string, err?: Error, obj?: any): void {
    console.error(
      JSON.stringify({
        ...this.dflt,
        severity: 'ERROR',
        message,
        ...objectify(err),
        ...objectify(obj),
      })
    );
  }
  errorReport(service: string, message: string, err?: any, obj?: any): void {
    console.error(
      JSON.stringify({
        ...this.dflt,
        severity: 'ERROR',
        message,
        serviceContext: { service },
        '@type': logType,
        ...objectify(err),
        ...objectify(obj),
      })
    );
  }
}
