"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.moveObject = exports.copyObject = exports.writeBuffer = exports.getList = exports.getFile = exports.putFile = exports.delObject = void 0;
const compressible_1 = __importDefault(require("compressible"));
const form_data_1 = __importDefault(require("form-data"));
const fs_1 = __importDefault(require("fs"));
const mime_1 = __importDefault(require("mime"));
const url_1 = __importDefault(require("url"));
const util_1 = require("util");
const zlib_1 = __importDefault(require("zlib"));
const gapi_lite_1 = __importDefault(require("../gapi-lite"));
const scopes = ['https://www.googleapis.com/auth/devstorage.read_write'];
const api = new gapi_lite_1.default(scopes);
const uploadPrefix = 'https://www.googleapis.com/upload/storage/v1/b';
const bucketPrefix = 'https://www.googleapis.com/storage/v1/b';
const zlibGzip = util_1.promisify(zlib_1.default.gzip);
async function delObject(gsUri) {
    const um = url_1.default.parse(gsUri);
    if (!um.pathname)
        throw new Error(`invalid gsuri ${gsUri}`);
    const name = um.pathname.substr(1);
    const encName = encodeURIComponent(name);
    await api.tryDelete(`${bucketPrefix}/${um.hostname}/o/${encName}`);
}
exports.delObject = delObject;
async function putFile(gsUri, fpath, opts = {}) {
    const um = url_1.default.parse(gsUri);
    const contentType = opts.contentType || 'application/octet-stream';
    const metaData = {
        name: (um.pathname || '').substr(1),
        cacheControl: opts.cacheControl,
    };
    const form = new form_data_1.default();
    form.append('headers', JSON.stringify(metaData), {
        contentType: 'application/json; charset=UTF-8',
    });
    form.append('object', fs_1.default.createReadStream(fpath), { contentType });
    await api.request(`${uploadPrefix}/${um.hostname}/o`, {
        method: 'POST',
        searchParams: { uploadType: 'multipart' },
        body: form,
    });
}
exports.putFile = putFile;
function getFile(gsUri) {
    const um = url_1.default.parse(gsUri);
    return api.request(`${bucketPrefix}/${um.hostname}/o/${encodeURIComponent((um.path || '').substr(1))}`, {
        method: 'GET',
        searchParams: { alt: 'media' },
        responseType: 'buffer',
    });
}
exports.getFile = getFile;
async function getList(gsUri) {
    const um = url_1.default.parse(gsUri);
    const { items } = await api.request(`${bucketPrefix}/${um.hostname}/o/`, {
        method: 'GET',
        searchParams: { prefix: um.pathname ? um.pathname.substr(1) : '' },
    });
    return items;
}
exports.getList = getList;
async function writeBuffer(bufStr, gsUri, opts = {}) {
    const ibuf = typeof bufStr === 'string' ? Buffer.from(bufStr, 'utf-8') : bufStr;
    const um = url_1.default.parse(gsUri);
    const contentType = opts.contentType || mime_1.default.getType(gsUri) || 'application/octet-stream';
    const canGzip = compressible_1.default(contentType);
    const metadata = {
        name: (um.pathname || '').substr(1),
        cacheControl: opts.cacheControl,
        contentEncoding: canGzip ? 'gzip' : undefined,
        metadata: opts.customMetadata,
    };
    const buf = canGzip ? await zlibGzip(ibuf) : ibuf;
    const form = new form_data_1.default();
    form.append('headers', JSON.stringify(metadata), {
        contentType: 'application/json; charset=UTF-8',
    });
    form.append('object', buf, { contentType });
    await api.request(`${uploadPrefix}/${um.hostname}/o`, {
        method: 'POST',
        searchParams: { uploadType: 'multipart' },
        body: form,
    });
}
exports.writeBuffer = writeBuffer;
async function copyObject(srcGsUri, destGsUri) {
    const { hostname: srcBucket, pathname: srcPath } = url_1.default.parse(srcGsUri);
    const { hostname: destBucket, pathname: destPath } = url_1.default.parse(destGsUri);
    if (!srcPath)
        throw new Error(`invalid source ${srcPath}`);
    if (!destPath)
        throw new Error(`invalid destination ${destPath}`);
    const encSrcPath = encodeURIComponent(srcPath.substr(1));
    const encDestPath = encodeURIComponent(destPath.substr(1));
    const apiUrl = `${bucketPrefix}/${srcBucket}/o/${encSrcPath}/copyTo/b/${destBucket}/o/${encDestPath}`;
    await api.request(apiUrl, {
        method: 'POST',
    });
}
exports.copyObject = copyObject;
async function moveObject(srcGsUri, destGsUri) {
    await copyObject(srcGsUri, destGsUri);
    await delObject(srcGsUri);
}
exports.moveObject = moveObject;
