"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryPublish = exports.publish = exports.publishMulti = void 0;
const logger_1 = __importDefault(require("cc-utils/logger"));
const gapi_lite_1 = __importDefault(require("../gapi-lite"));
const isDev = process.env.NODE_ENV !== 'production';
const api = new gapi_lite_1.default(['https://www.googleapis.com/auth/pubsub']);
const prjPrefix = 'https://pubsub.googleapis.com/v1/projects';
const logger = new logger_1.default('pubsub');
async function publishMulti(topicName, jobs) {
    try {
        if (isDev)
            console.log(`pubsub.${topicName}.publish`);
        const ep = `${prjPrefix}/${topicName}:publish`;
        const messages = jobs.map((m) => ({
            data: Buffer.from(JSON.stringify(m)).toString('base64'),
        }));
        const resp = await api.request(ep, {
            method: 'POST',
            json: { messages },
            ccRetry: true,
        });
        return resp.messageIds;
    }
    catch (err) {
        logger.error('publish.failed', err, { topicName, jobs });
        throw err;
    }
}
exports.publishMulti = publishMulti;
async function publish(topicName, job) {
    const result = await publishMulti(topicName, [job]);
    return result[0];
}
exports.publish = publish;
function tryPublish(topicName, body) {
    publish(topicName, body).catch(() => {
        /* error logged in publish() function */
    });
}
exports.tryPublish = tryPublish;
