export declare enum FieldType {
    String = "STRING",
    Integer = "INTEGER",
    Float = "FLOAT",
    TimeStamp = "TIMESTAMP",
    Record = "RECORD",
    Boolean = "BOOLEAN"
}
export declare enum FieldMode {
    Required = "REQUIRED",
    Repeated = "REPEATED"
}
export interface ITableField {
    name: string;
    type: FieldType;
    mode: FieldMode;
    fields: ITableField[];
}
export interface ITableSchema {
    fields: [ITableField];
}
export interface TableInfo {
    schema: ITableSchema;
}
export declare enum JobState {
    Done = "DONE",
    Pending = "PENDING",
    Running = "RUNNING"
}
export interface JobStatus {
    state: JobState;
    errorResult: any;
    errors: [any];
}
export interface JobInfo {
    status: JobStatus;
}
export interface ITimePartition {
    type: string;
    field: string;
}
export interface IExtDataConfig {
    sourceUris: string[];
    compression?: 'GZIP' | 'NONE';
    sourceFormat?: 'NEWLINE_DELIMITED_JSON';
    schema?: ITableSchema;
}
export interface ITableResource {
    schema?: ITableSchema;
    timePartitioning?: ITimePartition;
    externalDataConfiguration?: IExtDataConfig;
}
export declare class Dataset {
    private projectId;
    private datasetId;
    constructor(projectId: string, datasetId: string);
    getTableInfo(tableId: string): Promise<TableInfo | null>;
    getJob(jobId: string): Promise<JobInfo | null>;
    createLoadJob(tableId: string, jobId: string, gsURI: string): Promise<void>;
    createTable(tableId: string, tblResource: ITableResource): Promise<void>;
    patchTable(tableId: string, tblResource: ITableResource): Promise<void>;
    createTableIfNotExists(tableId: string): Promise<ITableSchema>;
}
