import { ParamType } from './query';
export interface Field {
    name: string;
    type: string;
    mode: string;
    fields: any[];
    description: string;
}
export interface BigQueryResponse {
    schema: {
        fields: Field[];
    };
    jobReference: {
        projectId: string;
        jobId: string;
        location: string;
    };
    totalRows: number;
    pageToken: string;
    rows: BQRow[];
    totalBytesProcessed: number;
    jobComplete: boolean;
    errors: [{
        reason: string;
        location: string;
        debugInfo: string;
        message: string;
    }];
    cacheHit: boolean;
    numDmlAffectedRows: number;
}
export interface BQRow {
    f: BQTableCell[];
}
export interface BQTableCell {
    v?: any;
}
export interface BQParsedResponse {
    columns: Field[];
    rows: (string | number | boolean | Date)[][];
}
export interface BQParsedPaginatedResponse {
    columns: Field[];
    rows: (string | number | boolean | Date)[][];
    pageToken?: string;
    jobId?: string;
    totalRows?: string;
}
export interface IPaginationOptions {
    pageToken?: string;
    jobId?: string;
    maxResults?: number;
}
export declare type QueryParamType = string | number | Date | boolean | string[] | number[] | Date[] | boolean[];
export interface QueryParams {
    [key: string]: QueryParamType;
}
interface BQSimpleParamType {
    type: ParamType;
}
export interface BQParamType extends BQSimpleParamType {
    arrayType?: BQSimpleParamType;
}
export interface BQParamValue {
    value: string;
}
export interface BQParamArrayValue {
    arrayValues: BQParamValue[];
}
export interface BQParam {
    name: string;
    parameterType: BQSimpleParamType;
    parameterValue: BQParamValue | BQParamArrayValue;
}
export {};
