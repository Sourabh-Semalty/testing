import compressible from 'compressible';
import FormData from 'form-data';
import fs from 'fs';
import mime from 'mime';
import urlm from 'url';
import { promisify } from 'util';
import zlib from 'zlib';
import GoogleAPI from '../gapi-lite';

const scopes = ['https://www.googleapis.com/auth/devstorage.read_write'];
const api = new GoogleAPI(scopes);
const uploadPrefix = 'https://www.googleapis.com/upload/storage/v1/b';
const bucketPrefix = 'https://www.googleapis.com/storage/v1/b';

const zlibGzip = promisify(zlib.gzip);

interface UpdateOptions {
  contentType?: string;
  cacheControl?: string;
  contentEncoding?: string;
}

interface IWriteOptions {
  contentType?: string;
  cacheControl?: string;
  customMetadata?: { [key: string]: string };
}

export async function delObject(gsUri: string) {
  const um = urlm.parse(gsUri);
  if (!um.pathname) throw new Error(`invalid gsuri ${gsUri}`);
  const name = um.pathname.substr(1);
  const encName = encodeURIComponent(name);
  await api.tryDelete(`${bucketPrefix}/${um.hostname}/o/${encName}`);
}

export async function putFile(gsUri: string, fpath: string, opts: UpdateOptions = {}) {
  const um = urlm.parse(gsUri);
  const contentType = opts.contentType || 'application/octet-stream';
  const metaData = {
    name: (um.pathname || '').substr(1),
    cacheControl: opts.cacheControl,
  };
  const form = new FormData();
  form.append('headers', JSON.stringify(metaData), {
    contentType: 'application/json; charset=UTF-8',
  });
  form.append('object', fs.createReadStream(fpath), { contentType });
  await api.request(`${uploadPrefix}/${um.hostname}/o`, {
    method: 'POST',
    searchParams: { uploadType: 'multipart' },
    body: form,
  });
}

export function getFile(gsUri: string): Promise<Buffer> {
  const um = urlm.parse(gsUri);
  return api.request(
    `${bucketPrefix}/${um.hostname}/o/${encodeURIComponent((um.path || '').substr(1))}`,
    {
      method: 'GET',
      searchParams: { alt: 'media' },
      responseType: 'buffer',
    }
  );
}

export interface ObjectInfo {
  name: string;
  contentType: string;
  contentEncoding: string;
  metadata: { [key: string]: string };
  md5Hash: string;
  size: string;
  timeCreated: string;
  updated: string;
}

export async function getList(gsUri: string) {
  const um = urlm.parse(gsUri);
  const { items } = await api.request(`${bucketPrefix}/${um.hostname}/o/`, {
    method: 'GET',
    searchParams: { prefix: um.pathname ? um.pathname.substr(1) : '' },
  });
  return items as ObjectInfo[];
}

export async function writeBuffer(
  bufStr: Buffer | string,
  gsUri: string,
  opts: IWriteOptions = {}
) {
  const ibuf = typeof bufStr === 'string' ? Buffer.from(bufStr, 'utf-8') : bufStr;
  const um = urlm.parse(gsUri);
  const contentType =
    opts.contentType || mime.getType(gsUri) || 'application/octet-stream';
  const canGzip = compressible(contentType);
  const metadata: any = {
    name: (um.pathname || '').substr(1),
    cacheControl: opts.cacheControl,
    contentEncoding: canGzip ? 'gzip' : undefined,
    metadata: opts.customMetadata,
  };
  const buf = canGzip ? await zlibGzip(ibuf) : ibuf;
  const form = new FormData();
  form.append('headers', JSON.stringify(metadata), {
    contentType: 'application/json; charset=UTF-8',
  });
  form.append('object', buf, { contentType });
  await api.request(`${uploadPrefix}/${um.hostname}/o`, {
    method: 'POST',
    searchParams: { uploadType: 'multipart' },
    body: form,
  });
}

export async function copyObject(srcGsUri: string, destGsUri: string) {
  const { hostname: srcBucket, pathname: srcPath } = urlm.parse(srcGsUri);
  const { hostname: destBucket, pathname: destPath } = urlm.parse(destGsUri);

  if (!srcPath) throw new Error(`invalid source ${srcPath}`);
  if (!destPath) throw new Error(`invalid destination ${destPath}`);

  const encSrcPath = encodeURIComponent(srcPath.substr(1));
  const encDestPath = encodeURIComponent(destPath.substr(1));
  const apiUrl = `${bucketPrefix}/${srcBucket}/o/${encSrcPath}/copyTo/b/${destBucket}/o/${encDestPath}`;

  await api.request(apiUrl, {
    method: 'POST',
  });
}

export async function moveObject(srcGsUri: string, destGsUri: string) {
  await copyObject(srcGsUri, destGsUri);
  await delObject(srcGsUri);
}
