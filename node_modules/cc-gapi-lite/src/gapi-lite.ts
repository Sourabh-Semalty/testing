import Logger from 'cc-utils/logger';
import fs from 'fs';
import got, { Method, RequiredRetryOptions } from 'got';
import http from 'http';
import https from 'https';
import jws, { SignOptions } from 'jws';
import { Readable } from 'stream';

const agent = {
  http: new http.Agent({ keepAlive: true }),
  https: new https.Agent({ keepAlive: true }),
};

const logger = new Logger('gapi');
const GOOGLE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/token';
const RETRY_CONFIG: Partial<RequiredRetryOptions> = {
  limit: 5,
  methods: ['GET', 'PATCH', 'POST', 'PUT'],
  statusCodes: [408, 413, 429, 500, 502, 503, 504],
};

interface JSONKeyFile {
  client_email: string;
  private_key: string;
}

interface RequestOptions {
  method: Method;
  responseType?: 'json' | 'buffer';
  searchParams?: { [key: string]: string | number };
  body?: Readable;
  json?: { [key: string]: any };
  ccRetry?: boolean;
}

function is404(err: Error) {
  return err instanceof got.HTTPError && err.response.statusCode === 404;
}

export default class GoogleAPI {
  private authKey: JSONKeyFile;
  private scope: string;
  private expiry: number;
  private token: string;
  private alreadyPromised: Promise<string> | null;
  constructor(scopes: string[]) {
    const jsonPath = process.env.GOOGLE_APPLICATION_CREDENTIALS;
    if (!jsonPath) throw new Error('env.not.set GOOGLE_APPLICATION_CREDENTIALS');
    this.authKey = JSON.parse(fs.readFileSync(jsonPath).toString());
    this.scope = scopes.join(' ');
    this.expiry = 0;
    this.token = '';
    this.alreadyPromised = null;
  }
  async getToken() {
    if (this.expiry > Date.now()) {
      return this.token;
    } else {
      if (this.alreadyPromised) {
        const val = await this.alreadyPromised;
        return val;
      } else {
        this.alreadyPromised = this.getTokenInternal();
        const val = await this.alreadyPromised;
        this.alreadyPromised = null;
        return val;
      }
    }
  }
  private async getTokenInternal() {
    const iat = Math.floor(Date.now() / 1000);
    const toSign: SignOptions = {
      header: { alg: 'RS256' },
      payload: {
        iss: this.authKey.client_email,
        scope: this.scope,
        aud: GOOGLE_TOKEN_URL,
        exp: iat + 3600,
        iat,
      },
      secret: this.authKey.private_key,
    };
    const body = {
      grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
      assertion: jws.sign(toSign),
    };
    const result: any = await got.post(GOOGLE_TOKEN_URL, { form: body, agent }).json();
    this.token = result.access_token;
    this.expiry = Date.now() + (result.expires_in - 10) * 1000;
    logger.log('got.token', { account: this.authKey.client_email, scope: this.scope });
    this.alreadyPromised = null;
    return this.token;
  }

  async request(url: string, opts: RequestOptions) {
    const tok = await this.getToken();
    try {
      const resp = await got(url, {
        agent,
        method: opts.method,
        headers: { Authorization: `Bearer ${tok}` },
        searchParams: opts.searchParams,
        responseType: opts.responseType || 'json',
        body: opts.body,
        json: opts.json,
        retry: opts.ccRetry ? RETRY_CONFIG : undefined,
      });
      return resp.body as any;
    } catch (err) {
      if (err instanceof got.HTTPError) {
        const { statusCode } = err.response;
        if (statusCode === 400 || statusCode === 403) {
          const jbody = JSON.stringify(err.response.body);
          throw new Error(`status.${statusCode} ${url} ${jbody}`);
        } else {
          throw err;
        }
      } else {
        throw err;
      }
    }
  }

  // try 'get' resource, in case of 404 return null
  public async tryGet(url: string): Promise<any> {
    try {
      return await this.request(url, { method: 'GET', responseType: 'json' });
    } catch (err) {
      if (is404(err)) return null;
      else throw err;
    }
  }

  // try 'delete' resource, in case of 404 ignore
  public async tryDelete(url: string) {
    try {
      await this.request(url, { method: 'DELETE', responseType: 'json' });
    } catch (err) {
      if (!is404(err)) throw err;
    }
  }
}
